version: 2.1

jobs:
  deploy-serverless:
    docker:
      - image: cimg/node:lts  # Use Node.js 14 (or your preferred version)
    steps:
      - checkout

      # Set up npm to use a directory with write permissions
      - run:
          name: Configure npm to use a user directory
          command: |
            mkdir -p ~/.npm-global
            npm config set prefix '~/.npm-global'
            echo 'export PATH=~/.npm-global/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV

      # Navigate to the `server` folder
      - run:
          name: Navigate to server folder
          command: cd server

      # Install Serverless Framework globally
      - run:
          name: Install Serverless Framework
          command: npm install -g serverless

      # Restore cached dependencies
      - restore_cache:
          keys:
            - v1-dependencies-server-{{ checksum "server/package.json" }}
            - v1-dependencies-server-

      # Install project dependencies
      - run:
          name: Install project dependencies
          command: npm install

      # Cache dependencies
      - save_cache:
          paths:
            - server/node_modules
          key: v1-dependencies-server-{{ checksum "server/package.json" }}

      # Set up AWS credentials
      - run:
          name: Configure AWS CLI
          command: |
            aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
            aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
            aws configure set region ${AWS_REGION}

      # Deploy the Serverless application
      - run:
          name: Deploy to AWS
          command: serverless deploy

  build:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout

      # Set up npm to use a directory with write permissions
      - run:
          name: Configure npm to use a user directory
          command: |
            mkdir -p ~/.npm-global
            npm config set prefix '~/.npm-global'
            echo 'export PATH=~/.npm-global/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV

      # Restore cached dependencies
      - restore_cache:
          keys:
            - v1-dependencies-ui-{{ checksum "ui/package-lock.json" }}
            - v1-dependencies-ui-

      # Navigate to the `ui` folder
      - run:
          name: Navigate to UI folder
          command: cd ui

      # Install project dependencies
      - run:
          name: Install dependencies
          command: npm install

      # Cache dependencies
      - save_cache:
          paths:
            - ui/node_modules
          key: v1-dependencies-ui-{{ checksum "ui/package-lock.json" }}

      # Build the Next.js project
      - run:
          name: Build project
          command: npm run build

      # Persist the build artifacts to the workspace
      - persist_to_workspace:
          root: ui
          paths:
            - .next
            - public
            - package.json
            - package-lock.json
            - node_modules

  deploy-nextjs:
    docker:
      - image: cimg/node:lts
    steps:
      - attach_workspace:
          at: ui

      # Set up npm to use a directory with write permissions
      - run:
          name: Configure npm to use a user directory
          command: |
            mkdir -p ~/.npm-global
            npm config set prefix '~/.npm-global'
            echo 'export PATH=~/.npm-global/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV

      # Install Vercel CLI globally
      - run:
          name: Install Vercel CLI
          command: npm install -g vercel

      # Deploy to Vercel
      - run:
          name: Deploy to Vercel
          command: vercel --prod --token $VERCEL_TOKEN

workflows:
  deploy-workflow:
    jobs:
      - deploy-serverless:
          filters:
            branches:
              only:
                - circleci-project-setup
      - build:
          filters:
            branches:
              only:
                - circleci-project-setup
      - deploy-nextjs:
          filters:
            branches:
              only:
                - circleci-project-setup
          requires:
            - build